# -*- coding: utf-8 -*-
"""Waterbody_detection_geoai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q7nwmwzdIEx1Ga1PHRwQoJblopSoqVPF
"""

import ee, geemap

# Initialize GEE
ee.Authenticate()
ee.Initialize(project = 'ee-lavibas23')


map = geemap.Map(basemap = 'SATELLITE')
map

roi = map.draw_last_feature.geometry()

s2 = ee.ImageCollection("COPERNICUS/S2_SR") \
    .filterBounds(roi) \
    .filterDate("2022-01-01", "2022-12-31") \
    .filter(ee.Filter.lt("CLOUDY_PIXEL_PERCENTAGE", 10)) \
    .median() \
    .clip(roi)

geemap.ee_export_image(s2.select(['B2', 'B3', 'B4', 'B5', 'B6', 'B8']), filename="sentinel_composite.tif", scale=30, region=roi)



green = s2.select('B3')
nir = s2.select('B8')
ndwi = green.subtract(nir).divide(green.add(nir))

water_mask = ndwi.gt(0.01)  # threshold to identify water
geemap.ee_export_image(water_mask, filename="water_mask.tif", scale=30, region=roi)

import os
import shutil

# Create folders
os.makedirs("/content/project/images", exist_ok=True)
os.makedirs("/content/project/masks", exist_ok=True)

# Move your files into the appropriate folders
# Replace with actual filenames if different
shutil.move("/content/sentinel_composite.tif", "/content/project/images/sentinel_composite.tif")
shutil.move("/content/water_mask.tif", "/content/project/masks/water_mask.tif")

!pip install geoai-py

import geoai

geoai.export_geotiff_tiles_batch(
    images_folder="/content/project/images",
    masks_folder="/content/project/masks",
    output_folder="/content/project/tiles",
    tile_size=256,
    stride=64,
    quiet=True
)

geoai.train_segmentation_model(
    images_dir="/content/project/tiles/images",
    labels_dir="/content/project/tiles/masks",
    output_dir="/content/project/tiles/unet_models",
    architecture="unet",
    encoder_name="resnet34",
    encoder_weights="imagenet",
    num_channels=6,         # Sentinel-2 bands (B2 to B8, excluding B7 if not used)
    num_classes=2,
    batch_size=8,
    num_epochs=50,
    learning_rate=0.001,
    val_split=0.2,
    verbose=True
)

geoai.plot_performance_metrics(
    history_path="/content/project/tiles/unet_models/training_history.pth",
    figsize=(15, 5),
    verbose=True
)

import geoai

images_dir = "/content/project/tiles/images"
predictions_dir = "/content/project/tiles/predictions"
model_path = "/content/project/tiles/unet_models/best_model.pth"

geoai.semantic_segmentation_batch(
    input_dir=images_dir,
    output_dir=predictions_dir,
    model_path=model_path,
    architecture="unet",
    encoder_name="resnet34",
    num_channels=6,
    num_classes=2,
    window_size=256,       # Match your tile size
    overlap=192,           # overlap = tile_size - stride
    batch_size=8,
    quiet=True,
)

import os

tile_dir = "/content/project/tiles/images"
tiles = os.listdir(tile_dir)
print(tiles)

tile_id = "sentinel_composite_000000"

test_image_path = f"/content/project/tiles/images/{tile_id}.tif"
prediction_path = f"/content/project/tiles/predictions/{tile_id}_mask.tif"
ground_truth_path = f"/content/project/tiles/masks/{tile_id}.tif"
save_path = f"/content/project/tiles/{tile_id}_comparison.png"

import geoai

fig = geoai.plot_prediction_comparison(
    original_image=test_image_path,
    prediction_image=prediction_path,
    ground_truth_image=ground_truth_path,
    titles=["Original", "Prediction", "Ground Truth"],
    figsize=(15, 5),
    save_path=save_path,
    show_plot=True,
    indexes=[5, 4, 3],  # Sentinel-2 RGB
    divider=5000
)